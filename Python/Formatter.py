# -*- coding: utf-8 -*-
"""NewNLPAADL(ExpandedFunctionalBasis).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mGIZmwrqq4qRsVDMC5Me1sDrd05-nbsQ
"""

import nltk

nltk.download('wordnet')
nltk.download('stopwords')
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')
from nltk.tokenize import word_tokenize
from nltk.tokenize import sent_tokenize
from nltk.corpus import stopwords

stop_words = set(stopwords.words("english"))

# Words to be preserved for understanding basis in Grammar
stopwords_remove = ['of', 'from', 'to', 'and', 'it', 'with']
# Different energy types
energy_list = ['Human', 'Acoustic', 'Biologcal', 'Chemical', 'Electrical', 'ElectroMagnetic', 'Hydraulic', 'Magnetic',
               'Mechanical', 'Thermal', 'Radioactive', 'Pneumatic']
# List of words present in Functional basis
separate_list = ['separate', 'divide', 'extract', 'remove', 'isolate', 'sever', 'disjoin', 'detach', 'detaches',
                 'release', 'sort', 'split', 'disconnect', 'subtract', 'refine',
                 'filter', 'purify', 'purifies', 'percolate', 'strain', 'clear', 'cut', 'drill', 'lathe', 'polish',
                 'polishes', 'sand']
distribute_list = ['distribute', 'diffuse', 'dispel', 'disperse', 'dissipate', 'diverge', 'scatter']
import_list = ['import', 'form entrance', 'allow', 'input', 'capture']
export_list = ['export', 'dispose', 'eject', 'emit', 'empty', 'remove', 'destroy', 'eliminate']
transfer_list = ['transfer', 'transport', 'transmit', 'carry', 'carries', 'deliver', 'advance', 'lift', 'move',
                 'conduct', 'convey']
guide_list = ['guide', 'translate', 'rotate', 'allow', 'direct', 'shift', 'steer', 'straighten', 'switch', 'switches',
              'move', 'relocate', 'spin', 'turn', 'constrain',
              'unfasten', 'unlock']
couple_list = ['couple', 'join', 'link', 'associate', 'assemble', 'fasten', 'attach', 'attaches']
mix_list = ['mix', 'mixes', 'add', 'blend', 'coalesce', 'combine', 'pack']
actuate_list = ['actuate', 'enable', 'initiate', 'start', 'turn on']
regulate_list = ['regulate', 'increase', 'decrease', 'control', 'equalize', 'limit', 'maintain', 'open', 'close',
                 'delay', 'interrupt']
change_list = ['change', 'increment', 'decrement', 'shape', 'condition', 'adjust', 'modulate', 'demodulate', 'invert',
               'normalize', 'rectify',
               'rectifies', 'reset', 'scale', 'vary', 'varies', 'modify', 'modifies', 'amplify', 'amplifies', 'enhance',
               'magnify', 'magnifies',
               'multiply', 'multiplies', 'attenuate', 'dampen', 'reduce', 'compact', 'compress', 'compresses', 'crush',
               'crushes', 'pierce', 'deform', 'form', 'prepare', 'adapt', 'treat']
stop_list = ['stop', 'prevent', 'inhibit', 'end', 'hault', 'pause', 'interrupt', 'restrain', 'disable', 'turn off',
             'shield', 'insulate', 'protect', 'resist']
convert_list = ['convert', 'condense', 'create', 'decode', 'differentiate', 'digitize', 'encode', 'evaporate',
                'generate', 'integrate', 'liquefy', 'liquifies', 'process', 'solidify',
                'solidifies', 'transform']
store_list = ['store', 'contain', 'collect', 'accumulate', 'enclose', 'absorb', 'consume', 'fill', 'reserve']
supply_list = ['supply', 'supplies', 'provide', 'replenish', 'replenishes', 'retrieve']
sense_list = ['sense', 'detect', 'measure', 'feel', 'determine', 'discern', 'perceive', 'recognize', 'identify',
              'identifies', 'locate']
indicate_list = ['indicate', 'track', 'display', 'announce', 'show', 'denote', 'record', 'register', 'mark', 'time',
                 'expose', 'select']
process_list = ['process', 'processes', 'calculate', 'check']
energize_list = ['energize', 'deenergize']
functional_verbs = []

# Adding characters in front of the reserved words
new_list = []
for elem in separate_list:
    if elem[-1] == "h":
        new_list.append(elem + 'es')
    elif elem[-1] == 'y':
        if elem[-2] in ['a', 'e', 'i', 'o', 'u']:
            new_list.append(elem + 's')
        else:
            new_list.append(elem[:-1] + 'ies')
    elif elem[-1] == 's':
        if elem[-2] == 's':
            new_list.append(elem + 'es')
        else:
            new_list.append(elem + 's')
    elif elem[-1] == 'x':
        new_list.append(elem + 'es')
    else:
        new_list.append(elem + 's')
separate_list = []
separate_list.extend(new_list)

new_list = []
for elem in distribute_list:
    if elem[-1] == "h":
        new_list.append(elem + 'es')
    elif elem[-1] == 'y':
        if elem[-2] in ['a', 'e', 'i', 'o', 'u']:
            new_list.append(elem + 's')
        else:
            new_list.append(elem[:-1] + 'ies')
    elif elem[-1] == 's':
        if elem[-2] == 's':
            new_list.append(elem + 'es')
        else:
            new_list.append(elem + 's')
    elif elem[-1] == 'x':
        new_list.append(elem + 'es')
    else:
        new_list.append(elem + 's')
distribute_list = []
distribute_list.extend(new_list)

new_list = []
for elem in import_list:
    if elem[-1] == "h":
        new_list.append(elem + 'es')
    elif elem[-1] == 'y':
        if elem[-2] in ['a', 'e', 'i', 'o', 'u']:
            new_list.append(elem + 's')
        else:
            new_list.append(elem[:-1] + 'ies')
    elif elem[-1] == 's':
        if elem[-2] == 's':
            new_list.append(elem + 'es')
        else:
            new_list.append(elem + 's')
    elif elem[-1] == 'x':
        new_list.append(elem + 'es')
    else:
        new_list.append(elem + 's')
import_list = []
import_list.extend(new_list)

new_list = []
for elem in export_list:
    if elem[-1] == "h":
        new_list.append(elem + 'es')
    elif elem[-1] == 'y':
        if elem[-2] in ['a', 'e', 'i', 'o', 'u']:
            new_list.append(elem + 's')
        else:
            new_list.append(elem[:-1] + 'ies')
    elif elem[-1] == 's':
        if elem[-2] == 's':
            new_list.append(elem + 'es')
        else:
            new_list.append(elem + 's')
    elif elem[-1] == 'x':
        new_list.append(elem + 'es')
    else:
        new_list.append(elem + 's')
export_list = []
export_list.extend(new_list)

new_list = []
for elem in transfer_list:
    if elem[-1] == "h":
        new_list.append(elem + 'es')
    elif elem[-1] == 'y':
        if elem[-2] in ['a', 'e', 'i', 'o', 'u']:
            new_list.append(elem + 's')
        else:
            new_list.append(elem[:-1] + 'ies')
    elif elem[-1] == 's':
        if elem[-2] == 's':
            new_list.append(elem + 'es')
        else:
            new_list.append(elem + 's')
    elif elem[-1] == 'x':
        new_list.append(elem + 'es')
    else:
        new_list.append(elem + 's')
transfer_list = []
transfer_list.extend(new_list)

new_list = []
for elem in guide_list:
    if elem[-1] == "h":
        new_list.append(elem + 'es')
    elif elem[-1] == 'y':
        if elem[-2] in ['a', 'e', 'i', 'o', 'u']:
            new_list.append(elem + 's')
        else:
            new_list.append(elem[:-1] + 'ies')
    elif elem[-1] == 's':
        if elem[-2] == 's':
            new_list.append(elem + 'es')
        else:
            new_list.append(elem + 's')
    elif elem[-1] == 'x':
        new_list.append(elem + 'es')
    else:
        new_list.append(elem + 's')
guide_list = []
guide_list.extend(new_list)

new_list = []
for elem in couple_list:
    if elem[-1] == "h":
        new_list.append(elem + 'es')
    elif elem[-1] == 'y':
        if elem[-2] in ['a', 'e', 'i', 'o', 'u']:
            new_list.append(elem + 's')
        else:
            new_list.append(elem[:-1] + 'ies')
    elif elem[-1] == 's':
        if elem[-2] == 's':
            new_list.append(elem + 'es')
        else:
            new_list.append(elem + 's')
    elif elem[-1] == 'x':
        new_list.append(elem + 'es')
    else:
        new_list.append(elem + 's')
couple_list = []
couple_list.extend(new_list)

new_list = []
for elem in mix_list:
    if elem[-1] == "h":
        new_list.append(elem + 'es')
    elif elem[-1] == 'y':
        if elem[-2] in ['a', 'e', 'i', 'o', 'u']:
            new_list.append(elem + 's')
        else:
            new_list.append(elem[:-1] + 'ies')
    elif elem[-1] == 's':
        if elem[-2] == 's':
            new_list.append(elem + 'es')
        else:
            new_list.append(elem + 's')
    elif elem[-1] == 'x':
        new_list.append(elem + 'es')
    else:
        new_list.append(elem + 's')
mix_list = []
mix_list.extend(new_list)

new_list = []
for elem in actuate_list:
    if elem[-1] == "h":
        new_list.append(elem + 'es')
    elif elem[-1] == 'y':
        if elem[-2] in ['a', 'e', 'i', 'o', 'u']:
            new_list.append(elem + 's')
        else:
            new_list.append(elem[:-1] + 'ies')
    elif elem[-1] == 's':
        if elem[-2] == 's':
            new_list.append(elem + 'es')
        else:
            new_list.append(elem + 's')
    elif elem[-1] == 'x':
        new_list.append(elem + 'es')
    else:
        new_list.append(elem + 's')
actuate_list = []
actuate_list.extend(new_list)

new_list = []
for elem in regulate_list:
    if elem[-1] == "h":
        new_list.append(elem + 'es')
    elif elem[-1] == 'y':
        if elem[-2] in ['a', 'e', 'i', 'o', 'u']:
            new_list.append(elem + 's')
        else:
            new_list.append(elem[:-1] + 'ies')
    elif elem[-1] == 's':
        if elem[-2] == 's':
            new_list.append(elem + 'es')
        else:
            new_list.append(elem + 's')
    elif elem[-1] == 'x':
        new_list.append(elem + 'es')
    else:
        new_list.append(elem + 's')
regulate_list = []
regulate_list.extend(new_list)

new_list = []
for elem in change_list:
    if elem[-1] == "h":
        new_list.append(elem + 'es')
    elif elem[-1] == 'y':
        if elem[-2] in ['a', 'e', 'i', 'o', 'u']:
            new_list.append(elem + 's')
        else:
            new_list.append(elem[:-1] + 'ies')
    elif elem[-1] == 's':
        if elem[-2] == 's':
            new_list.append(elem + 'es')
        else:
            new_list.append(elem + 's')
    elif elem[-1] == 'x':
        new_list.append(elem + 'es')
    else:
        new_list.append(elem + 's')
change_list = []
change_list.extend(new_list)

new_list = []
for elem in stop_list:
    if elem[-1] == "h":
        new_list.append(elem + 'es')
    elif elem[-1] == 'y':
        if elem[-2] in ['a', 'e', 'i', 'o', 'u']:
            new_list.append(elem + 's')
        else:
            new_list.append(elem[:-1] + 'ies')
    elif elem[-1] == 's':
        if elem[-2] == 's':
            new_list.append(elem + 'es')
        else:
            new_list.append(elem + 's')
    elif elem[-1] == 'x':
        new_list.append(elem + 'es')
    else:
        new_list.append(elem + 's')
stop_list = []
stop_list.extend(new_list)

new_list = []
for elem in convert_list:
    if elem[-1] == "h":
        new_list.append(elem + 'es')
    elif elem[-1] == 'y':
        if elem[-2] in ['a', 'e', 'i', 'o', 'u']:
            new_list.append(elem + 's')
        else:
            new_list.append(elem[:-1] + 'ies')
    elif elem[-1] == 's':
        if elem[-2] == 's':
            new_list.append(elem + 'es')
        else:
            new_list.append(elem + 's')
    elif elem[-1] == 'x':
        new_list.append(elem + 'es')
    else:
        new_list.append(elem + 's')
convert_list = []
convert_list.extend(new_list)

new_list = []
for elem in store_list:
    if elem[-1] == "h":
        new_list.append(elem + 'es')
    elif elem[-1] == 'y':
        if elem[-2] in ['a', 'e', 'i', 'o', 'u']:
            new_list.append(elem + 's')
        else:
            new_list.append(elem[:-1] + 'ies')
    elif elem[-1] == 's':
        if elem[-2] == 's':
            new_list.append(elem + 'es')
        else:
            new_list.append(elem + 's')
    elif elem[-1] == 'x':
        new_list.append(elem + 'es')
    else:
        new_list.append(elem + 's')
store_list = []
store_list.extend(new_list)

new_list = []
for elem in supply_list:
    if elem[-1] == "h":
        new_list.append(elem + 'es')
    elif elem[-1] == 'y':
        if elem[-2] in ['a', 'e', 'i', 'o', 'u']:
            new_list.append(elem + 's')
        else:
            new_list.append(elem[:-1] + 'ies')
    elif elem[-1] == 's':
        if elem[-2] == 's':
            new_list.append(elem + 'es')
        else:
            new_list.append(elem + 's')
    elif elem[-1] == 'x':
        new_list.append(elem + 'es')
    else:
        new_list.append(elem + 's')
supply_list = []
supply_list.extend(new_list)

new_list = []
for elem in sense_list:
    if elem[-1] == "h":
        new_list.append(elem + 'es')
    elif elem[-1] == 'y':
        if elem[-2] in ['a', 'e', 'i', 'o', 'u']:
            new_list.append(elem + 's')
        else:
            new_list.append(elem[:-1] + 'ies')
    elif elem[-1] == 's':
        if elem[-2] == 's':
            new_list.append(elem + 'es')
        else:
            new_list.append(elem + 's')
    elif elem[-1] == 'x':
        new_list.append(elem + 'es')
    else:
        new_list.append(elem + 's')
sense_list = []
sense_list.extend(new_list)

new_list = []
for elem in indicate_list:
    if elem[-1] == "h":
        new_list.append(elem + 'es')
    elif elem[-1] == 'y':
        if elem[-2] in ['a', 'e', 'i', 'o', 'u']:
            new_list.append(elem + 's')
        else:
            new_list.append(elem[:-1] + 'ies')
    elif elem[-1] == 's':
        if elem[-2] == 's':
            new_list.append(elem + 'es')
        else:
            new_list.append(elem + 's')
    elif elem[-1] == 'x':
        new_list.append(elem + 'es')
    else:
        new_list.append(elem + 's')
indicate_list = []
indicate_list.extend(new_list)

new_list = []
for elem in process_list:
    if elem[-1] == "h":
        new_list.append(elem + 'es')
    elif elem[-1] == 'y':
        if elem[-2] in ['a', 'e', 'i', 'o', 'u']:
            new_list.append(elem + 's')
        else:
            new_list.append(elem[:-1] + 'ies')
    elif elem[-1] == 's':
        if elem[-2] == 's':
            new_list.append(elem + 'es')
        else:
            new_list.append(elem + 's')
    elif elem[-1] == 'x':
        new_list.append(elem + 'es')
    else:
        new_list.append(elem + 's')
process_list = []
process_list.extend(new_list)

new_list = []
for elem in energize_list:
    if elem[-1] == "h":
        new_list.append(elem + 'es')
    elif elem[-1] == 'y':
        if elem[-2] in ['a', 'e', 'i', 'o', 'u']:
            new_list.append(elem + 's')
        else:
            new_list.append(elem[:-1] + 'ies')
    elif elem[-1] == 's':
        if elem[-2] == 's':
            new_list.append(elem + 'es')
        else:
            new_list.append(elem + 's')
    elif elem[-1] == 'x':
        new_list.append(elem + 'es')
    else:
        new_list.append(elem + 's')
energize_list = []
energize_list.extend(new_list)

# Adding all words to a single list
for i in separate_list:
    functional_verbs.append(i)
for i in distribute_list:
    functional_verbs.append(i)
for i in import_list:
    functional_verbs.append(i)
for i in export_list:
    functional_verbs.append(i)
for i in transfer_list:
    functional_verbs.append(i)
for i in guide_list:
    functional_verbs.append(i)
for i in couple_list:
    functional_verbs.append(i)
for i in mix_list:
    functional_verbs.append(i)
for i in actuate_list:
    functional_verbs.append(i)
for i in regulate_list:
    functional_verbs.append(i)
for i in change_list:
    functional_verbs.append(i)
for i in stop_list:
    functional_verbs.append(i)
for i in convert_list:
    functional_verbs.append(i)
for i in store_list:
    functional_verbs.append(i)
for i in supply_list:
    functional_verbs.append(i)
for i in sense_list:
    functional_verbs.append(i)
for i in indicate_list:
    functional_verbs.append(i)
for i in process_list:
    functional_verbs.append(i)
for i in energize_list:
    functional_verbs.append(i)

# Different adjectives to be used as a Fuzzy system
temperature = ['Cryogenic', 'Frozen', 'Chilled', 'Freezing', 'Cold', 'Cool', 'Normal Temperature', 'Room Temperature',
               'Lukewarm', 'Toasty', 'Mild', 'Warm',
               'Heated', 'Hot', 'Cooked', 'Toasted', 'Boiling', 'Burning', 'Steaming']
velocity = ['Static', 'Still', 'Creeping', 'Sluggish', 'Slow', 'Flowing', 'Moving', 'Fast', 'Rapid']
material = ['Solid', 'Liquid', 'Gas', 'Mixture']

# Preserving words present in temperature, velocity, energy list and functional verbs
for j in temperature:
    if j.lower() in stop_words:
        stop_words.remove(j.lower())
for j in functional_verbs:
    if j.lower() in stop_words:
        stop_words.remove(j.lower())
for j in velocity:
    if j.lower() in stop_words:
        stop_words.remove(j.lower())
for j in stopwords_remove:
    if j.lower() in stop_words:
        stop_words.remove(j.lower())
for j in energy_list:
    if j.lower() in stop_words:
        stop_words.remove(j.lower())
for j in material:
    if j.lower() in stop_words:
        stop_words.remove(j.lower())

# Adding some words to the stop words list that we do not require and removing words we need
stopwords_add = ['The', 'A']
for i in stopwords_add:
    stop_words.add(i)

# for i in stopwords_remove:
#     stop_words.remove(i)

# stop_words.remove('of')

from nltk.stem.snowball import SnowballStemmer

ps = SnowballStemmer("english")
from nltk.corpus import wordnet
from nltk.stem import WordNetLemmatizer

# input_paragraph="The coffeemaker consists of a cooking unit and a pot. The pot is connected to the cooking unit. The cooking unit consists of a tank, a heating unit, and a brewing unit. The tank is connected to the heating unit. The heating unit is connected to the brewing unit. The pot consists of a glassware, a lid, and a handle. The lid is connected to the glassware. The handle is connected to the glassware. The tank imports water and transfers it to the heating unit. The heating unit consists of a heating coil and a hot water pipe. The heating coil is connected to the hot water pipe. The heating coil imports electricity and converts it to heat. The heating coil transfers heat to the hot water pipe. The hot water pipe receives water from the tank. The hot water pipe imports heat from the heating coil. The hot water pipe imports water and heat and energizes it to hot water. The brewing unit consists of a vertical pipe, a water valve, a shower head, a filter, and a filter holder. The lower end of the vertical pipe is connected to the hot water pipe. The water valve is connected to the vertical pipe. The shower head is connected to the upper end of the vertical pipe. The filer holder consists of a filter. The vertical pipe receives hot water from the hot water pipe. The vertical pipe transfers hot water to the shower head. The shower head receives hot water from the vertical pipe. The shower head distributes it to filter. The filter imports ground coffee. The filter receives hot water from the shower head. The filter couples ground coffee and hot water. The pot stores the liquid coffee."
# input_paragraph="The xyz evaporates hot water to steam using thermal energy."
# input_paragraph="CLK_ONE supplies synchronous value to L_FGS. CLK_TWO supplies synchronous value to LR_Bus. CLK_THREE supplies synchronous value to R_FGS. CLK_FOUR supplies synchronous value to RL_Bus."
# input_paragraph="The coffeemaker consists of a cooking unit and a pot. The pot is connected to the cooking unit. The cooking unit consists of a tank, a heating unit, and a brewing unit. The tank is connected to the heating unit. The heating unit is connected to the brewing unit. The pot consists of a glassware, a lid, and a handle. The lid is connected to the glassware. The handle is connected to the glassware. The tank imports water. The tank transfers water to the heating unit. The heating unit consists of a heating coil and a hot water pipe. The heating coil is connected to the hot water pipe. The heating coil imports electricity. The heating coil converts electricity to heat. The heating coil transfers heat to the hot water pipe. The hot water pipe receives water from the tank. The hot water pipe imports heat from the heating coil. The hot water pipe imports water and heat. The hot water pipe energizes water to hot water. The brewing unit consists of a vertical pipe, a water valve, a shower head, a filter, and a filter holder. The vertical pipe is connected to the hot water pipe. The water valve is connected to the vertical pipe. The shower head is connected to the vertical pipe. The filter holder consists of a filter. The hot water pipe supplies hot water to the vertical pipe. The vertical pipe transfers hot water to the shower head. The shower head supplies hot water to filter. The filter imports ground coffee. The filter couples ground coffee and hot water. The pot stores the liquid coffee."
# Above one has many redundant statements
# input_paragraph = "The coffeemaker consists of a cooking unit and a pot. The pot is connected to the cooking unit. The cooking unit consists of a tank, a heating unit, and a brewing unit. The tank is connected to the heating unit. The heating unit is connected to the brewing unit. The pot consists of a glassware, a lid, and a handle. The lid is connected to the glassware. The handle is connected to the glassware. The tank imports water. The tank transfers water to the heating unit. The heating unit consists of a heating coil and a hot water pipe. The heating coil is connected to the hot water pipe. The heating coil imports electricity. The heating coil converts electricity to heat. The heating coil transfers heat to the hot water pipe. The tank supplies water to the hot water pipe. The hot water pipe energizes water with heat to form hot water. The brewing unit consists of a vertical pipe, a water valve, a shower head, a filter, and a filter holder. The vertical pipe is connected to the hot water pipe. The water valve is connected to the vertical pipe. The shower head is connected to the vertical pipe. The filter holder consists of a filter. The hot water pipe supplies hot water to the vertical pipe. The vertical pipe transfers hot water to the shower head. The shower head supplies hot water to filter. The filter imports ground coffee. The filter couples ground coffee and hot water. The pot stores the liquid coffee."
# input_paragraph = "The FGS System consists of the Left Side FGS, the Right Side FGS, a LR Bus, and a RL Bus. LR Bus is connected to Left Side FGS and Right Side FGS. RL Bus is connected to Left Side FGS and Right Side FGS. The Left Side FGS allow a boolean input from the Left Transfer Switch and Left Primary Side. The Right Side FGS allows a boolean input from the Right Transfer Switch and Right Primary Side. CLK_ONE supplies synchronous value to L_FGS. CLK_TWO supplies synchronous value to LR_Bus. CLK_THREE supplies synchronous value to R_FGS. CLK_FOUR supplies synchronous value to RL_Bus."
input_paragraph = "The FGS System transfer an boolean variable to the LR Bus "

def remove_stopwords_from_raw_text(text):
    try:
        words = nltk.word_tokenize(text)
        return remove_stopwords_from_tokenized_text(words)

    except Exception as e:
        print(str(e))


def remove_stopwords_from_tokenized_text(words):
    try:
        output_list = []

        for w in words:
            if w not in stop_words:
                output_list.append(w)

        return output_list

    except Exception as e:
        print(str(e))


# Removing stopwords
final_list = remove_stopwords_from_raw_text(input_paragraph)

# print("\n\n\n\nAfter removing stopwords = " , final_list)

# Consists can be used in the same way as before
# Converting words not in nltk synonym list to the ones that are accepted
index = 0
for i in final_list:
    for j in separate_list:
        if ((i.lower() == j.lower())):
            if i.lower()[-1] == 's':
                final_list[index] = "separates"
            else:
                final_list[index] = "separated"
            break
    for j in distribute_list:
        if ((i.lower() == j.lower())):
            if i.lower()[-1] == 's':
                final_list[index] = "distributes"
            else:
                final_list[index] = "distributed"
            break
    for j in import_list:
        if ((i.lower() == j.lower())):
            if i.lower()[-1] == 's':
                final_list[index] = "imports"
            else:
                final_list[index] = "imported"
            break
    for j in export_list:
        if ((i.lower() == j.lower())):
            if i.lower()[-1] == 's':
                final_list[index] = "exports"
            else:
                final_list[index] = "exported"
            break
    for j in transfer_list:
        if ((i.lower() == j.lower())):
            if i.lower()[-1] == 's':
                final_list[index] = "transfers"
            else:
                final_list[index] = "transferred"
            break
    for j in guide_list:
        if ((i.lower() == j.lower())):
            if i.lower()[-1] == 's':
                final_list[index] = "guides"
            else:
                final_list[index] = "guided"
            break
    for j in couple_list:
        if ((i.lower() == j.lower())):
            if (i.lower() == "connected" or i.lower() == "connects"):
                final_list[index] = j.lower()
            else:
                if i.lower()[-1] == 's':
                    final_list[index] = "couples"
                else:
                    final_list[index] = "coupled"
            break
    for j in mix_list:
        if ((i.lower() == j.lower())):
            if i.lower()[-1] == 's':
                final_list[index] = "mixes"
            else:
                final_list[index] = "mixed"
            break
    for j in actuate_list:
        if ((i.lower() == j.lower())):
            if i.lower()[-1] == 's':
                final_list[index] = "actuates"
            else:
                final_list[index] = "actuated"
            break
    for j in regulate_list:
        if ((i.lower() == j.lower())):
            if i.lower()[-1] == 's':
                final_list[index] = "regulates"
            else:
                final_list[index] = "regulated"
            break
    for j in change_list:
        if ((i.lower() == j.lower())):
            if i.lower()[-1] == 's':
                final_list[index] = "changes"
            else:
                final_list[index] = "changed"
            break
    for j in stop_list:
        if ((i.lower() == j.lower())):
            if i.lower()[-1] == 's':
                final_list[index] = "stops"
            else:
                final_list[index] = "stopped"
            break
    for j in convert_list:
        if ((i.lower() == j.lower())):
            if i.lower()[-1] == 's':
                final_list[index] = "converts"
            else:
                final_list[index] = "converted"
            break
    for j in store_list:
        if ((i.lower() == j.lower())):
            if i.lower()[-1] == 's':
                final_list[index] = "stores"
            else:
                final_list[index] = "stored"
            break
    for j in supply_list:
        if ((i.lower() == j.lower())):
            if i.lower()[-1] == 's':
                final_list[index] = "supplies"
            else:
                final_list[index] = "supplied"
            break
    for j in sense_list:
        if ((i.lower() == j.lower())):
            if i.lower()[-1] == 's':
                final_list[index] = "senses"
            else:
                final_list[index] = "sensed"
            break
    for j in indicate_list:
        if ((i.lower() == j.lower())):
            if i.lower()[-1] == 's':
                final_list[index] = "indicates"
            else:
                final_list[index] = "indicated"
            break
    for j in process_list:
        if (i.lower() == j.lower()):
            if i.lower()[-1] == 's':
                final_list[index] = "processes"
            else:
                final_list[index] = "processed"
            break
    index = index + 1

new_final_list = []
new_para = ""
for ele in final_list:
    if ele == ".":
        new_para = new_para + ele
    else:
        new_para = new_para + " " + ele

# print("\n\nBefore Last Para = ", new_para)

new_para_latest = ""

for i in new_para.split("."):
    if "consists" in i:
        within_words = i.split()
        for words in within_words:
            if (words == "and" or words == "consists" or words == ","):
                new_para_latest = new_para_latest[:-1] + " " + words + " "
            else:
                new_para_latest = new_para_latest + words.upper() + "_"
        new_para_latest = new_para_latest[:-1] + ".\n"
    elif "connected" in i:
        within_words = i.split()
        for words in within_words:
            if (words == "connected"):
                new_para_latest = new_para_latest[:-1] + " " + words
            elif (words == "to"):
                new_para_latest = new_para_latest + " " + words + " "
            else:
                new_para_latest = new_para_latest + words.upper() + "_"
        new_para_latest = new_para_latest[:-1] + ".\n"
    elif ("imports" in i) or ("exports" in i) or ("transfers" in i) or ("guides" in i) or ("supplies" in i):
        within_words = i.split()
        index_func = 0
        index_from = 0
        index_to = 0
        for m in range(len(within_words)):
            words = ['imports', 'exports', 'transfers', 'guides', 'supplies']
            for i in words:
                if i in within_words:
                    occured_word = i
            index_func = within_words.index(occured_word)
            if (within_words[m] == "from"):
                index_from = m
            elif (within_words[m] == "to"):
                index_to = m
            else:
                continue
        m = 0
        while (m < len(within_words)):
            if (index_func > 0 and m == 0):
                for x in range(index_func):
                    new_para_latest = new_para_latest + within_words[m].upper() + "_"
                    m = m + 1
                new_para_latest = new_para_latest[:-1]
            elif (index_from > 0 and index_to > 0 and m == index_from):
                new_para_latest = new_para_latest + " from" + " "
                m = m + 1
                for x in range(index_from + 1, index_to):
                    new_para_latest = new_para_latest + within_words[m].upper() + "_"
                    m = m + 1
                new_para_latest = new_para_latest[:-1] + " to "
                m = m + 1
                for x in range(index_to + 1, len(within_words)):
                    new_para_latest = new_para_latest + within_words[m].upper() + "_"
                    m = m + 1
                new_para_latest = new_para_latest[:-1]
            elif (index_from > 0 and m == index_from):
                new_para_latest = new_para_latest + " from "
                m = m + 1
                for x in range(index_from + 1, len(within_words)):
                    new_para_latest = new_para_latest + within_words[m].upper() + "_"
                    m = m + 1
                new_para_latest = new_para_latest[:-1]
            elif (index_to > 0 and m == index_to):
                new_para_latest = new_para_latest + " to "
                m = m + 1
                for x in range(index_to + 1, len(within_words)):
                    new_para_latest = new_para_latest + within_words[m].upper() + "_"
                    m = m + 1
                new_para_latest = new_para_latest[:-1]
            else:
                new_para_latest = new_para_latest + " " + within_words[m]
                m += 1
        new_para_latest = new_para_latest + ".\n"
    elif (("converts" in i) or ("mixes" in i) or ("couples" in i) or ("separates" in i) or ("energizes" in i) or (
            "deenergizes" in i) or ("stores" in i) or ("stops" in i) or ("changes" in i) or ("regulates" in i)):
        within_words = i.split()
        words = ['converts', 'mixes', 'couples', 'separates', 'energizes', 'deenergizes', 'stores', 'stops', 'changes',
                 'regulates']
        for i in words:
            if i in within_words:
                occured_word = i
        index_of_ow = within_words.index(occured_word)
        for j in range(len(within_words)):
            if j < index_of_ow:
                new_para_latest = new_para_latest + within_words[j].upper() + "_"
            elif j == index_of_ow:
                new_para_latest = new_para_latest[:-1] + " " + within_words[j]
            else:
                new_para_latest = new_para_latest + " " + within_words[j]
        new_para_latest = new_para_latest + ".\n"
    elif "distributes" in i:
        within_words = i.split()
        index = within_words.index("distributes")
        index_to = within_words.index("to")
        for x in range(len(within_words)):
            if x < index:
                new_para_latest = new_para_latest + within_words[x].upper() + "_"
            elif x == index:
                new_para_latest = new_para_latest[:-1] + " " + within_words[x]
            elif x == index_to:
                new_para_latest = new_para_latest + " " + within_words[x] + " "
            else:
                if x > index_to:
                    if within_words[x] == "and":
                        new_para_latest = new_para_latest[:-1] + " " + within_words[x] + " "
                    else:
                        new_para_latest = new_para_latest + within_words[x].upper() + "_"
                else:
                    new_para_latest = new_para_latest + " " + within_words[x]
        new_para_latest = new_para_latest[:-1] + ".\n"
    else:
        continue

# print("\n\nLatest para = ", new_para_latest)


var = False
exchange_word = ''


def convert_synonyms(word):
    try:
        stemmed_word = ps.stem(word)
        if ((word == '.') or (word == ',')):
            return word
        new_word = '"' + stemmed_word + '"'
        for syn in wordnet.synsets(new_word):
            for lm in syn.lemmas():
                for x in functional_verbs:
                    if (lm.name()).lower() == x.lower():
                        var = True;
                        exchange_word = x
        if var == True:
            return exchange_word
            var = False
        else:
            return word
    except Exception as e:
        word.upper()


# Converting the words into synonym if there in nltk library
for item in word_tokenize(new_para_latest):
    var = False
    for i in energy_list:
        if i.lower() == item.lower():
            new_final_list.append(i)
            var = True
            break
    if var == True:
        continue
    else:
        for j in temperature:
            if j.lower() == item.lower():
                new_final_list.append(j)
                var = True
                break
        if var:
            continue
        else:
            for k in velocity:
                if k.lower() == item.lower():
                    new_final_list.append(k)
                    var = True
                    break
            if var:
                continue
            else:
                for l in material:
                    if l.lower() == item.lower():
                        new_final_list.append(l)
                        var = True
                        break
                if var:
                    continue
                else:
                    new_item = convert_synonyms(item)
                    if (new_item == None):
                        new_final_list.append(item)
                    else:
                        new_final_list.append(new_item)

# #Printing list
# print("\n\n\n List after processing synonyms = " , new_final_list)


str = ''
for element in new_final_list:
    if element == '.':
        str = str + element + "\n"
    else:
        str = str + " " + element

# print(str)

send_to_grammar = ""
additional_reservde_words = [',', 'consists', 'connected']
for i in str.split("."):
    indexes = []
    within_words = i.split()
    for j in within_words:
        if (j.isupper() or (j in functional_verbs) or (j in temperature) or (j in velocity) or (j in material) or (
                j in additional_reservde_words) or (j in stopwords_remove)):
            continue
        else:
            indexes.append(within_words.index(j))
    if len(indexes) >= 2:
        for j in range(len(indexes) - 1):
            if (indexes[j] + 1 == indexes[j + 1]):
                within_words[indexes[j]] = within_words[indexes[j]][:1].upper() + within_words[indexes[j]][1:]
    if (i != "\n"):
        for j in within_words:
            send_to_grammar = send_to_grammar + j + " "
        send_to_grammar = send_to_grammar[:-1] + ".\n"

print(send_to_grammar)
# textfile = open("NLP_Output.txt", "w")
# for element in final_list:
#     textfile.write(element + "\n")
# textfile.close()

# from google.colab import files
# files.download('NLP_Output.txt')
